buildscript {
    ext {
        springBootVersion = '2.2.5.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
        classpath "gradle.plugin.net.ossindex:ossindex-gradle-plugin:0.3.20-beta"
        classpath 'com.netflix.nebula:gradle-lint-plugin:9.3.4'
        classpath "net.saliman:gradle-cobertura-plugin:2.5.4"
        classpath 'org.owasp:dependency-check-gradle:3.3.1'
    }
}
plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'com.moowork.node' version '1.3.1'
    id 'org.gradle.war'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
    implementation 'org.springframework.security:spring-security-messaging'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version:"2.0.4.RELEASE"
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.apache.httpcomponents:httpclient'
    implementation 'org.apache.httpcomponents:httpmime'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'

    runtimeOnly 'mysql:mysql-connector-java'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    developmentOnly "org.springframework.boot:spring-boot-devtools"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude(module: 'commons-logging')
    }
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    providedRuntime group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: "${springBootVersion}"
}

task webpack(type: NodeTask, dependsOn: 'npmInstall') {
    def osName = System.getProperty("os.name").toLowerCase()
    if (osName.contains("windows")) {
        script = project.file('node_modules/webpack/bin/webpack.js')
    } else {
        script = project.file('node_modules/.bin/webpack')
    }
}
classes.finalizedBy('webpack')

war {
    enabled = true
    archiveFileName = 'ROOT.war'
}

task explodedWar(type: Copy) {
    into "$buildDir/exploded"
    with war
}

bootWar {
    enabled = false
}